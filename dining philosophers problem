#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5   // number of philosophers

sem_t chopstick[N];   // one chopstick per philosopher

void *philosopher(void *num) {
    int id = *(int *)num;

    printf("Philosopher %d is thinking\n", id);
    sleep(1);

    // pick left chopstick
    sem_wait(&chopstick[id]);
    // pick right chopstick
    sem_wait(&chopstick[(id+1)%N]);

    printf("Philosopher %d is eating\n", id);
    sleep(2);

    // put down left chopstick
    sem_post(&chopstick[id]);
    // put down right chopstick
    sem_post(&chopstick[(id+1)%N]);

    printf("Philosopher %d finished eating\n", id);
    return NULL;
}

int main() {
    pthread_t phil[N];
    int id[N];

    // initialize semaphores
    for(int i=0; i<N; i++)
        sem_init(&chopstick[i], 0, 1);

    // create philosopher threads
    for(int i=0; i<N; i++) {
        id[i] = i;
        pthread_create(&phil[i], NULL, philosopher, &id[i]);
    }

    // wait for threads to finish
    for(int i=0; i<N; i++)
        pthread_join(phil[i], NULL);

    return 0;
}
