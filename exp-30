#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5   // size of buffer

int buffer[BUFFER_SIZE];
int in = 0, out = 0;   // buffer indices

sem_t empty;   // counts empty slots
sem_t full;    // counts full slots
pthread_mutex_t mutex;

void *producer(void *arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        item = rand() % 100;  // produce an item

        sem_wait(&empty);              // wait if buffer is full
        pthread_mutex_lock(&mutex);    // enter critical section

        buffer[in] = item;
        printf("Producer produced: %d at position %d\n", item, in);
        in = (in + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);  // exit critical section
        sem_post(&full);               // increment full count

        sleep(1); // simulate time delay
    }
    return NULL;
}

void *consumer(void *arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);               // wait if buffer is empty
        pthread_mutex_lock(&mutex);    // enter critical section

        item = buffer[out];
        printf("Consumer consumed: %d from position %d\n", item, out);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex);  // exit critical section
        sem_post(&empty);              // increment empty count

        sleep(2); // simulate slower consumption
    }
    return NULL;
}

int main() {
    pthread_t prod, cons;

    // initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    // create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // wait for threads to finish
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // cleanup
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
