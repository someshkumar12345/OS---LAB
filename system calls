#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>      // open(), fcntl()
#include <unistd.h>     // lseek(), close()
#include <sys/stat.h>   // stat()
#include <dirent.h>     // opendir(), readdir()
#include <string.h>

int main() {
    int fd;
    char buffer[50];
    struct stat st;

    // 1. Open a file
    fd = open("sample.txt", O_CREAT | O_RDWR, 0644);
    if (fd < 0) {
        perror("open");
        exit(1);
    }

    // Write some content
    write(fd, "UNIX System Call Demo\n", 22);

    // 2. Demonstrate lseek()
    lseek(fd, 0, SEEK_SET); // move to beginning
    read(fd, buffer, sizeof(buffer) - 1);
    buffer[22] = '\0';
    printf("Content read using lseek+read: %s\n", buffer);

    // 3. Demonstrate fcntl()
    int flags = fcntl(fd, F_GETFL);  // get file status flags
    if (flags < 0) {
        perror("fcntl");
    } else {
        printf("fcntl: File descriptor flags = %d\n", flags);
    }

    // 4. Demonstrate stat()
    if (stat("sample.txt", &st) == 0) {
        printf("stat: File size = %ld bytes\n", st.st_size);
        printf("stat: Number of links = %ld\n", (long)st.st_nlink);
    } else {
        perror("stat");
    }

    // 5. Demonstrate opendir() and readdir()
    DIR *dir;
    struct dirent *entry;

    dir = opendir(".");
    if (dir == NULL) {
        perror("opendir");
        exit(1);
    }

    printf("\nDirectory listing using opendir() and readdir():\n");
    while ((entry = readdir(dir)) != NULL) {
        printf("  %s\n", entry->d_name);
    }
    closedir(dir);

    // Close file
    close(fd);

    return 0;
}
